/*
 * This file was generated by the Gradle 'init' task.
 *
 * This generated file contains a sample Java project to get you started.
 * For more details take a look at the Java Quickstart chapter in the Gradle
 * User Manual available at https://docs.gradle.org/6.5.1/userguide/tutorial_java_projects.html
 */

plugins {
    // Apply the java plugin to add support for Java
    id 'java'

    // Apply the application plugin to add support for building a CLI application.
    id 'application'
}

repositories {
    // Use jcenter for resolving dependencies.
    // You can declare any Maven/Ivy/file repository here.
    jcenter()
}

dependencies {
    // This dependency is used by the application.
    implementation 'com.google.guava:guava:29.0-jre'

    // Use JUnit test framework
    testImplementation 'junit:junit:4.13'
}

task insertionsort(type : JavaExec) {
    classpath = sourceSets.main.runtimeClasspath
    main = "com.algdat.algorithms.sorting.InsertionSort"
}

task selectionsort(type : JavaExec) {
    classpath = sourceSets.main.runtimeClasspath
    main = "com.algdat.algorithms.sorting.SelectionSort"
}

task countingsort(type : JavaExec) {
    classpath = sourceSets.main.runtimeClasspath
    main = "com.algdat.algorithms.sorting.CountingSort"
}

task bucketsort(type : JavaExec) {
    classpath = sourceSets.main.runtimeClasspath
    main = "com.algdat.algorithms.sorting.BucketSort"
}

task mergesort(type : JavaExec) {
    classpath = sourceSets.main.runtimeClasspath
    main = "com.algdat.algorithms.sorting.MergeSort"
}

task quicksort(type : JavaExec) {
    classpath = sourceSets.main.runtimeClasspath
    main = "com.algdat.algorithms.sorting.QuickSort"
}

task radixsort(type : JavaExec) {
    classpath = sourceSets.main.runtimeClasspath
    main = "com.algdat.algorithms.sorting.RadixSort"
}

task heapsort(type : JavaExec) {
    classpath = sourceSets.main.runtimeClasspath
    main = "com.algdat.algorithms.sorting.HeapSort"
}

task dfs(type : JavaExec) {
    classpath = sourceSets.main.runtimeClasspath
    main = "com.algdat.algorithms.graphs.DFS"
}

task bfs(type : JavaExec) {
    classpath = sourceSets.main.runtimeClasspath
    main = "com.algdat.algorithms.graphs.BFS"
}

task dijkstra(type : JavaExec) {
    classpath = sourceSets.main.runtimeClasspath
    main = "com.algdat.algorithms.graphs.Dijkstra"
}

task bellmanford(type : JavaExec) {
    classpath = sourceSets.main.runtimeClasspath
    main = "com.algdat.algorithms.graphs.BellmanFord"
}

task binarysearch(type : JavaExec) {
    classpath = sourceSets.main.runtimeClasspath
    main = "com.algdat.algorithms.arrays.BinarySearch"
}

task binarytree(type : JavaExec) {
    classpath = sourceSets.main.runtimeClasspath
    main = "com.algdat.datastructures.graphs.BinaryTree"
}

task redblacktree(type : JavaExec) {
    classpath = sourceSets.main.runtimeClasspath
    main = "com.algdat.datastructures.graphs.RedBlackTree"

}

task separationnodes(type : JavaExec) {
    classpath = sourceSets.main.runtimeClasspath
    main = "com.algdat.algorithms.graphs.SeparationNodes"
}

task topologicalsort(type : JavaExec) {
    classpath = sourceSets.main.runtimeClasspath
    main = "com.algdat.algorithms.graphs.TopologicalSort"
}

task stack(type : JavaExec) {
    classpath = sourceSets.main.runtimeClasspath
    main = "com.algdat.datastructures.containers.Stack"
}

task kosaraju(type : JavaExec) {
    classpath = sourceSets.main.runtimeClasspath
    main = "com.algdat.algorithms.graphs.KosarajuComponents"
}

task prims(type : JavaExec) {
    classpath = sourceSets.main.runtimeClasspath
    main = "com.algdat.algorithms.graphs.Prims"
}
